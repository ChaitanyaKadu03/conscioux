generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  settings      Settings[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  firstName String? // Optional first name of the user.
  lastName  String? // Optional last name of the user.
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Profile   Profile? // One-to-one relation with the Profile model.
}

model Profile {
  id        String  @id @default(uuid()) // Unique identifier for the profile.
  contact   String? @unique // Optional unique contact information (e.g., phone or email).
  isPremium Member  @default(FREE) // Indicates the premium status of the user (FREE, PREMIUM, INFINITY).
  stats     Int     @default(0) // Represents total profit or loss (e.g., in USD or preferred currency).
  user      User    @relation(fields: [userId], references: [id]) // Relation to the User model.
  userId    String  @unique // Unique foreign key linking the profile to a user.
}

model Settings {
  id       String             @id @default(uuid()) // Unique identifier for settings.
  language String             @default("English") // Preferred language of the user.
  theme    DeviceTheme        @default(DARK) // Preferred theme (e.g., dark mode).
  currency CurrencyCodes      @default(USD) // Preferred currency for viewing data.
  country  SupportedCountries @default(UNITED_STATES) // User's country of preference or location.
  userId   String             @unique // Unique foreign key linking the profile to a user.
  user     User               @relation(fields: [userId], references: [id]) // Relation to the User model.
}

// Bellow is related to next-auth@beta

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum Member {
  FREE
  PREMIUM
  INFINITY
}

enum SupportedCountries {
  UNITED_STATES
  CANADA
  EUROPEAN_UNION
  UNITED_KINGDOM
  JAPAN
  AUSTRALIA
  INDIA
  CHINA
  BRAZIL
  SOUTH_KOREA
  SOUTH_AFRICA
  SWITZERLAND
}

enum SupportedCurrencies {
  USD
  CAD
  EUR
  GBP
  JPY
  AUD
  INR
  CNY
  BRL
  KRW
  ZAR
  CHF
}

enum CurrencyCodes {
  USD
  CAD
  EUR
  GBP
  JPY
  AUD
  INR
  CNY
  BRL
  KRW
  ZAR
  CHF
}

enum DeviceTheme {
  DARK
  LIGHT
}

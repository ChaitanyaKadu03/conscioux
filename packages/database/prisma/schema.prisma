generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  firstName String? // Optional first name of the user.
  lastName  String? // Optional last name of the user.
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Profile   Profile? // One-to-one relation with the Profile model.
}

model Profile {
  id         String      @id @default(uuid()) // Unique identifier for the profile.
  imageUrl   String // URL for the profile picture.
  contact    String?     @unique // Optional unique contact information (e.g., phone or email).
  isPremium  E_isPremium @default(FREE) // Indicates the premium status of the user (FREE, PREMIUM, INFINITY).
  stats      Int         @default(0) // Represents total profit or loss (e.g., in USD or preferred currency).
  user       User        @relation(fields: [userId], references: [id]) // Relation to the User model.
  userId     String      @unique // Unique foreign key linking the profile to a user.
  observeId  String      @unique // Unique foreign key linking the profile to the Observe model.
  observe    Observe     @relation(fields: [observeId], references: [id]) // Relation to the Observe model for tracking watchlist or crypto stats.
  settingsId String      @unique // Unique foreign key linking the profile to the Settings model.
  settings   Settings    @relation(fields: [settingsId], references: [id]) // Relation to the Settings model for user preferences.
  securityId String      @unique // Unique foreign key linking the profile to the Security model.
  security   Security    @relation(fields: [securityId], references: [id]) // Relation to the Security model for authentication and security settings.
}

model Observe {
  id        String   @id @default(uuid()) // Unique identifier for observe data.
  list      String[] @default([]) // Array of cryptocurrencies or items being tracked.
  updatedAt DateTime @updatedAt // Timestamp for the last update of the watchlist or observed data.
  profile   Profile? // One-to-one relation with the Profile model.
}

model Settings {
  id       String     @id @default(uuid()) // Unique identifier for settings.
  language String     @default("English") // Preferred language of the user.
  theme    E_theme    @default(Dark) // Preferred theme (e.g., dark mode).
  currency E_currency @default(Dollars) // Preferred currency for viewing data.
  country  E_country  @default(USA) // User's country of preference or location.
  profile  Profile? // One-to-one relation with the Profile model.
}

model Security {
  id              String   @id @default(uuid()) // Unique identifier for security settings.
  two_factor_auth Boolean  @default(false) // Indicates if two-factor authentication is enabled.
  email_auth      Boolean  @default(false) // Indicates if email authentication is enabled.
  databaseSession String[] @default([]) // Store session hashes.
  loginIps        String[] @default([]) // List of recent IPs.
  profile         Profile? // One-to-one relation with the Profile model.
}

enum E_isPremium {
  FREE // Free tier with limited features.
  PREMIUM // Premium tier with additional features.
  INFINITY // Highest premium tier with unlimited features.
}

enum E_theme {
  Dark // Dark mode (assumed default).
}

enum E_currency {
  Dollars // US Dollars.
  Rupees // Indian Rupees.
}

enum E_country {
  India // India.
  USA // United States.
  UAE // United Arab Emirates.
  UK // United Kingdom.
}

// Bellow is related to next-auth@beta
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}